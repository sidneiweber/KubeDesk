name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install snapcraft (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo snap install snapcraft --classic
        snapcraft --version

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}-${{ github.ref_name }}
        path: dist/
        retention-days: 90

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release archive
      run: |
        mkdir -p release-packages
        
        echo "🔍 Procurando artefatos..."
        find artifacts -type f -name "*" | head -20
        
        # Organize artifacts by platform
        mkdir -p release-packages/linux release-packages/windows release-packages/macos
        
        # Linux artifacts
        echo "📦 Organizando artefatos Linux..."
        find artifacts -path "*/linux-*" -type f \( -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release-packages/linux/ \;
        
        # Windows artifacts (exclude elevate.exe and other unwanted files)
        echo "📦 Organizando artefatos Windows..."
        find artifacts -path "*/win-*" -type f \( -name "*.exe" -o -name "*.zip" \) ! -name "elevate.exe" ! -name "*.exe.blockmap" -exec cp {} release-packages/windows/ \;
        
        # macOS artifacts
        echo "📦 Organizando artefatos macOS..."
        find artifacts -path "*/mac-*" -type f \( -name "*.dmg" -o -name "*.zip" \) -exec cp {} release-packages/macos/ \;
        
        # Create individual platform archives
        cd release-packages
        for platform in linux windows macos; do
          if [ -d "$platform" ] && [ "$(ls -A $platform)" ]; then
            zip -r "kubedesk-${{ github.ref_name }}-$platform.zip" "$platform"
            echo "✅ Criado: kubedesk-${{ github.ref_name }}-$platform.zip"
          fi
        done
        
        # Create universal archive
        zip -r "kubedesk-${{ github.ref_name }}-all-platforms.zip" .
        echo "✅ Criado: kubedesk-${{ github.ref_name }}-all-platforms.zip"
        
        # List all created files
        echo "📋 Arquivos criados:"
        ls -la *.zip
        
        # List contents for verification
        echo "📋 Conteúdo por plataforma:"
        for platform in linux windows macos; do
          if [ -d "$platform" ]; then
            echo "  $platform:"
            ls -la "$platform" || echo "    (vazio)"
          fi
        done

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "## 📋 Mudanças desde $LAST_TAG" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%an)" $LAST_TAG..HEAD >> release_notes.md
        else
          echo "## 📋 Primeira Release" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%an)" --max-count=10 >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## 📦 Downloads Disponíveis" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🐧 Linux" >> release_notes.md
        echo "- **AppImage**: Executável portável universal" >> release_notes.md
        echo "- **DEB**: Pacote para Debian/Ubuntu" >> release_notes.md
        echo "- **RPM**: Pacote para Red Hat/Fedora" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🪟 Windows" >> release_notes.md
        echo "- **EXE**: Instalador NSIS" >> release_notes.md
        echo "- **Portable**: Versão portável" >> release_notes.md
        echo "- **ZIP**: Arquivo compactado" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🍎 macOS" >> release_notes.md
        echo "- **DMG**: Instalador para macOS" >> release_notes.md
        echo "- **ZIP**: Arquivo compactado" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📁 Arquivos Organizados" >> release_notes.md
        echo "- **all-platforms.zip**: Todos os artefatos" >> release_notes.md
        echo "- **linux.zip**: Apenas artefatos Linux" >> release_notes.md
        echo "- **windows.zip**: Apenas artefatos Windows" >> release_notes.md
        echo "- **macos.zip**: Apenas artefatos macOS" >> release_notes.md
        
        # Set the release notes as output
        {
          echo "release_notes<<EOF"
          cat release_notes.md
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          kubedesk-${{ github.ref_name }}-all-platforms.zip
          kubedesk-${{ github.ref_name }}-linux.zip
          kubedesk-${{ github.ref_name }}-windows.zip
          kubedesk-${{ github.ref_name }}-macos.zip
        body_path: release_notes.md
        generate_release_notes: false
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
